generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  address        String          @id
  firstTradeDate DateTime?
  totalVolume    Float           @default(0)
  createdAt      DateTime        @default(now())
  dtfs           DTF[]
  positions      Position[]
  statistics     UserStatistics?
}

model DTF {
  id               Int        @id
  creatorAddress   String
  name             String
  expiryTime       DateTime
  targetValuation  Float
  isTargetHigher   Boolean
  isSettled        Boolean    @default(false)
  tokensWithdrawn  Boolean    @default(false)
  yesTokenAddress  String
  noTokenAddress   String
  yesPool          Float
  noPool           Float
  distributionPool Float
  createdAt        DateTime   @default(now())
  yesWon           Boolean?
  creator          User       @relation(fields: [creatorAddress], references: [address])
  tokens           DTFToken[]
  events           Event[]
  positions        Position[]
}

model DTFToken {
  id           Int    @id @default(autoincrement())
  dtfId        Int
  tokenAddress String
  amount       Float
  dtf          DTF    @relation(fields: [dtfId], references: [id])
}

model Position {
  id              Int       @id @default(autoincrement())
  userAddress     String
  dtfId           Int
  isYesPosition   Boolean
  shareAmount     Float
  entryPrice      Float
  claimed         Boolean   @default(false)
  claimedAt       DateTime?
  createdAt       DateTime  @default(now())
  transactionHash String?
  avgEntryPrice   Float?
  dtf             DTF       @relation(fields: [dtfId], references: [id])
  user            User      @relation(fields: [userAddress], references: [address])
}

model Event {
  id              Int      @id @default(autoincrement())
  dtfId           Int
  eventType       String
  transactionHash String
  blockNumber     Int
  data            Json
  createdAt       DateTime @default(now())
  dtf             DTF      @relation(fields: [dtfId], references: [id])
}

model UserStatistics {
  userAddress     String   @id
  totalTrades     Int      @default(0)
  winningTrades   Int      @default(0)
  totalVolume     Float    @default(0)
  totalProfitLoss Float    @default(0)
  updatedAt       DateTime @default(now())
  user            User     @relation(fields: [userAddress], references: [address])
}

model ProcessedEvent {
  id              Int      @id @default(autoincrement())
  eventType       String
  transactionHash String
  blockNumber     Int
  processedAt     DateTime @default(now())

  @@index([eventType, transactionHash])
}
